#pragma once
#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/features2d.hpp>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <map>
#include <math.h>
using namespace cv;
using namespace std;

/**
* test_contour class.
* 
* Autogenerated Pipeline from GRIP
*
* Make sure to set sources before running process()
*/
class test_contour {
	private:
		Mat source0;
		Mat hsvThresholdOutput;
		Mat cvErodeOutput;
		Mat cvDilateOutput;
		vector<vector<Point> > findContoursOutput;
		vector<vector<Point> > filterContoursOutput;
		void hsvThreshold(Mat &, double [], double [], double [], Mat &);
		void cvErode(Mat &, Mat &, Point &, double , int , Scalar &, Mat &);
		void cvDilate(Mat &, Mat &, Point &, double , int , Scalar &, Mat &);
		void findContours(Mat &, bool , vector<vector<Point> > &);
		void filterContours(vector<vector<Point> > &, double , double , double , double , double , double , double [], double , double , double , double , vector<vector<Point> > &);

	public:
		test_contour();
		void Process(Mat Camera);
		void setsource0(Mat &source0);
		Mat* gethsvThresholdOutput();
		Mat* getcvErodeOutput();
		Mat* getcvDilateOutput();
		vector<vector<Point> >* getfindContoursOutput();
		vector<vector<Point> >* getfilterContoursOutput();
};

